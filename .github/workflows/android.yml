name: Android CI

on:
  push:
    tags:
      - 'v*' # Trigger the workflow only on tag pushes (e.g., v1.0.0)

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17' # Specify the version your project uses

      # Cache Gradle dependencies
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Grant gradlew permission
      - name: Grant execute permission for gradlew
        if: runner.os != 'Windows'
        run: chmod +x gradlew

      # Set up Android SDK
      - name: Set up Android SDK
        uses: android-actions/setup-android@v2
        with:
          api-level: 33 # Target API level
          build-tools: '33.0.2'
          target: 'android-33'

      # Build Debug APK
      - name: Build Debug APK
        run: ./gradlew assembleDebug

      - name: Debug properties
        run: echo "Store file ${{ secrets.ANDROID_KEYSTORE }}" && echo "Alias ${{ secrets.ANDROID_KEY_ALIAS }}"

      # Decode keystore
      - name: Decode keystore
        run: echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > keystore-project.jks

      # Build signed Release APK
      - name: Build signed release APK
        run: ./gradlew assembleRelease -Pandroid.injected.signing.store.file=keystore-project.jks -Pandroid.injected.signing.store.password=${{ secrets.ANDROID_KEYSTORE_PASSWORD }} -Pandroid.injected.signing.key.alias=${{ secrets.ANDROID_KEY_ALIAS }} -Pandroid.injected.signing.key.password=${{ secrets.ANDROID_KEY_PASSWORD }}
        env:
          ACTIONS_STEP_DEBUG: true
      
      # Extract package name from AndroidManifest.xml
      - name: Extract Package Name
        id: extract_package_name
        run: |
          if [ -f app/src/main/AndroidManifest.xml ]; then
            PACKAGE_NAME=$(grep -oP '(?<=<manifest[^>]*package=")[^"]*' app/src/main/AndroidManifest.xml)
            if [ -z "$PACKAGE_NAME" ]; then
              echo "Package name not found in AndroidManifest.xml"
              exit 1
            fi
            echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
          else
            echo "AndroidManifest.xml not found"
            exit 1
          fi

      # Rename Debug APK
      - name: Rename Debug APK
        run: |
          mv app/build/outputs/apk/debug/app-debug.apk app/build/outputs/apk/debug/${{ env.PACKAGE_NAME }}-${{ github.ref_name }}-debug.apk

      # Rename Release APK
      - name: Rename Release APK
        run: |
          mv app/build/outputs/apk/release/app-release.apk app/build/outputs/apk/release/${{ env.PACKAGE_NAME }}-${{ github.ref_name }}-release.apk

      # Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1.1.0
        with:
          tag_name: ${{ github.ref_name }} # Use the pushed tag as the release tag
          release_name: "Release ${{ github.ref_name }}"
          body: |
            Release details for version ${{ github.ref_name }}.
            - Built on: ${{ github.event.head_commit.timestamp }}
            - Commit: ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      # Upload Renamed Debug APK
      - name: Upload Renamed Debug APK
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app/build/outputs/apk/debug/${{ env.PACKAGE_NAME }}-debug.apk
          asset_name: ${{ env.PACKAGE_NAME }}-debug.apk
          asset_content_type: application/vnd.android.package-archive
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      # Upload Renamed Release APK
      - name: Upload Renamed Release APK
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app/build/outputs/apk/release/${{ env.PACKAGE_NAME }}-release.apk
          asset_name: ${{ env.PACKAGE_NAME }}-release.apk
          asset_content_type: application/vnd.android.package-archive
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}